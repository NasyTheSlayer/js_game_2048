{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    var gameTable = document.querySelector(\".game-field\");\n    var scoreElement = document.querySelector(\".game-score\");\n    var startButton = document.querySelector(\".start\");\n    var messageStart = document.querySelector(\".message-start\");\n    var messageLose = document.querySelector(\".message-lose\");\n    var messageWin = document.querySelector(\".message-win\");\n    var numRows = 4;\n    var numCols = 4;\n    var gameBoard = [];\n    var score = 0;\n    var gameActive = false;\n    document.addEventListener(\"keydown\", handleKeyPress);\n    startButton.addEventListener(\"click\", startGame);\n    function initializeGame() {\n        gameBoard = new Array(numRows).fill(null).map(function() {\n            return new Array(numCols).fill(null);\n        });\n        score = 0;\n        scoreElement.innerText = score;\n        gameActive = false;\n        messageStart.classList.remove(\"hidden\");\n        messageLose.classList.add(\"hidden\");\n        renderGameBoard();\n        if (isGameOver()) {\n            gameActive = false;\n            messageLose.classList.remove(\"hidden\");\n        }\n    }\n    function startGame() {\n        initializeGame();\n        createRandomCell();\n        createRandomCell();\n        renderGameBoard();\n        gameActive = true;\n        startButton.textContent = \"Restart\";\n        startButton.classList.add(\"restart\");\n        messageStart.classList.add(\"hidden\");\n        messageLose.classList.add(\"hidden\");\n        messageWin.classList.add(\"hidden\");\n    }\n    function isGameOver() {\n        for(var row = 0; row < numRows; row++)for(var col = 0; col < numCols; col++){\n            if (gameBoard[row][col] === null) return false;\n            if (col < numCols - 1 && gameBoard[row][col] === gameBoard[row][col + 1]) return false;\n            if (row < numRows - 1 && gameBoard[row][col] === gameBoard[row + 1][col]) return false;\n        }\n        return true;\n    }\n    function isGameWon() {\n        for(var row = 0; row < numRows; row++)for(var col = 0; col < numCols; col++){\n            if (gameBoard[row][col] === 2048) return true;\n        }\n        return false;\n    }\n    function createRandomCell() {\n        var emptyCells = [];\n        for(var row = 0; row < numRows; row++){\n            for(var col = 0; col < numCols; col++)if (!gameBoard[row][col]) emptyCells.push({\n                row: row,\n                col: col\n            });\n        }\n        if (emptyCells.length > 0) {\n            var _emptyCells_Math_floor = emptyCells[Math.floor(Math.random() * emptyCells.length)], row1 = _emptyCells_Math_floor.row, col1 = _emptyCells_Math_floor.col;\n            gameBoard[row1][col1] = Math.random() < 0.9 ? 2 : 4;\n        }\n    }\n    function renderGameBoard() {\n        gameTable.innerHTML = \"\";\n        for(var row = 0; row < numRows; row++){\n            var rowElement = document.createElement(\"tr\");\n            for(var col = 0; col < numCols; col++){\n                var cellValue = gameBoard[row][col];\n                var cellElement = document.createElement(\"td\");\n                cellElement.classList.add(\"field-cell\");\n                if (cellValue) {\n                    cellElement.textContent = cellValue;\n                    cellElement.classList.add(\"field-cell--\".concat(cellValue));\n                }\n                rowElement.appendChild(cellElement);\n            }\n            gameTable.appendChild(rowElement);\n        }\n    }\n    function handleKeyPress() {\n        if (!gameActive) return;\n        var moved = false;\n        switch(event.key){\n            case \"ArrowLeft\":\n                moved = moveLeft();\n                break;\n            case \"ArrowRight\":\n                moved = moveRight();\n                break;\n            case \"ArrowUp\":\n                moved = moveUp();\n                break;\n            case \"ArrowDown\":\n                moved = moveDown();\n                break;\n        }\n        if (moved) {\n            createRandomCell();\n            renderGameBoard();\n            if (isGameOver()) {\n                gameActive = false;\n                messageLose.classList.remove(\"hidden\");\n            }\n        }\n    }\n    function moveLeft() {\n        var moved = false;\n        for(var row = 0; row < numRows; row++){\n            for(var col = 1; col < numCols; col++)if (gameBoard[row][col]) {\n                var currentCol = col;\n                while(currentCol > 0){\n                    if (!gameBoard[row][currentCol - 1]) {\n                        gameBoard[row][currentCol - 1] = gameBoard[row][currentCol];\n                        gameBoard[row][currentCol] = null;\n                        currentCol--;\n                        moved = true;\n                    } else if (gameBoard[row][currentCol - 1] === gameBoard[row][currentCol]) {\n                        gameBoard[row][currentCol - 1] *= 2;\n                        score += gameBoard[row][currentCol - 1];\n                        gameBoard[row][currentCol] = null;\n                        moved = true;\n                        break;\n                    } else break;\n                }\n            }\n        }\n        if (moved) {\n            scoreElement.innerText = score;\n            if (isGameWon()) {\n                gameActive = false;\n                messageWin.classList.remove(\"hidden\");\n            }\n        }\n        return moved;\n    }\n    function moveRight() {\n        var moved = false;\n        for(var row = 0; row < numRows; row++){\n            for(var col = numCols - 2; col >= 0; col--)if (gameBoard[row][col]) {\n                var currentCol = col;\n                while(currentCol < numCols - 1){\n                    if (!gameBoard[row][currentCol + 1]) {\n                        gameBoard[row][currentCol + 1] = gameBoard[row][currentCol];\n                        gameBoard[row][currentCol] = null;\n                        currentCol++;\n                        moved = true;\n                    } else if (gameBoard[row][currentCol + 1] === gameBoard[row][currentCol]) {\n                        gameBoard[row][currentCol + 1] *= 2;\n                        score += gameBoard[row][currentCol + 1];\n                        gameBoard[row][currentCol] = null;\n                        moved = true;\n                        break;\n                    } else break;\n                }\n            }\n        }\n        if (moved) scoreElement.innerText = score;\n        return moved;\n    }\n    function moveUp() {\n        var moved = false;\n        for(var col = 0; col < numCols; col++){\n            for(var row = 1; row < numRows; row++)if (gameBoard[row][col]) {\n                var currentRow = row;\n                while(currentRow > 0){\n                    if (!gameBoard[currentRow - 1][col]) {\n                        gameBoard[currentRow - 1][col] = gameBoard[currentRow][col];\n                        gameBoard[currentRow][col] = null;\n                        currentRow--;\n                        moved = true;\n                    } else if (gameBoard[currentRow - 1][col] === gameBoard[currentRow][col]) {\n                        gameBoard[currentRow - 1][col] *= 2;\n                        score += gameBoard[currentRow - 1][col];\n                        gameBoard[currentRow][col] = null;\n                        moved = true;\n                        break;\n                    } else break;\n                }\n            }\n        }\n        if (moved) scoreElement.innerText = score;\n        return moved;\n    }\n    function moveDown() {\n        var moved = false;\n        for(var col = 0; col < numCols; col++){\n            for(var row = numRows - 2; row >= 0; row--)if (gameBoard[row][col]) {\n                var currentRow = row;\n                while(currentRow < numRows - 1){\n                    if (!gameBoard[currentRow + 1][col]) {\n                        gameBoard[currentRow + 1][col] = gameBoard[currentRow][col];\n                        gameBoard[currentRow][col] = null;\n                        currentRow++;\n                        moved = true;\n                    } else if (gameBoard[currentRow + 1][col] === gameBoard[currentRow][col]) {\n                        gameBoard[currentRow + 1][col] *= 2;\n                        score += gameBoard[currentRow + 1][col];\n                        gameBoard[currentRow][col] = null;\n                        moved = true;\n                        break;\n                    } else break;\n                }\n            }\n        }\n        if (moved) scoreElement.innerText = score;\n        return moved;\n    }\n    initializeGame();\n});\n\n//# sourceMappingURL=index.a9d11942.js.map\n","'use strict';\n\ndocument.addEventListener('DOMContentLoaded', function() {\n  const gameTable = document.querySelector('.game-field');\n  const scoreElement = document.querySelector('.game-score');\n  const startButton = document.querySelector('.start');\n  const messageStart = document.querySelector('.message-start');\n  const messageLose = document.querySelector('.message-lose');\n  const messageWin = document.querySelector('.message-win');\n\n  const numRows = 4;\n  const numCols = 4;\n  let gameBoard = [];\n  let score = 0;\n  let gameActive = false;\n\n  document.addEventListener('keydown', handleKeyPress);\n  startButton.addEventListener('click', startGame);\n\n  function initializeGame() {\n    gameBoard = new Array(numRows).fill(null).map(\n      () => new Array(numCols).fill(null)\n    );\n    score = 0;\n    scoreElement.innerText = score;\n    gameActive = false;\n    messageStart.classList.remove('hidden');\n    messageLose.classList.add('hidden');\n    renderGameBoard();\n\n    if (isGameOver()) {\n      gameActive = false;\n      messageLose.classList.remove('hidden');\n    }\n  }\n\n  function startGame() {\n    initializeGame();\n    createRandomCell();\n    createRandomCell();\n    renderGameBoard();\n    gameActive = true;\n    startButton.textContent = 'Restart';\n    startButton.classList.add('restart');\n    messageStart.classList.add('hidden');\n    messageLose.classList.add('hidden');\n    messageWin.classList.add('hidden');\n  }\n\n  function isGameOver() {\n    for (let row = 0; row < numRows; row++) {\n      for (let col = 0; col < numCols; col++) {\n        if (gameBoard[row][col] === null) {\n          return false;\n        }\n\n        if (col < numCols - 1\n          && gameBoard[row][col] === gameBoard[row][col + 1]) {\n          return false;\n        }\n\n        if (row < numRows - 1\n          && gameBoard[row][col] === gameBoard[row + 1][col]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  function isGameWon() {\n    for (let row = 0; row < numRows; row++) {\n      for (let col = 0; col < numCols; col++) {\n        if (gameBoard[row][col] === 2048) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  function createRandomCell() {\n    const emptyCells = [];\n\n    for (let row = 0; row < numRows; row++) {\n      for (let col = 0; col < numCols; col++) {\n        if (!gameBoard[row][col]) {\n          emptyCells.push({\n            row, col,\n          });\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const { row, col }\n        = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      gameBoard[row][col] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  function renderGameBoard() {\n    gameTable.innerHTML = '';\n\n    for (let row = 0; row < numRows; row++) {\n      const rowElement = document.createElement('tr');\n\n      for (let col = 0; col < numCols; col++) {\n        const cellValue = gameBoard[row][col];\n        const cellElement = document.createElement('td');\n\n        cellElement.classList.add('field-cell');\n\n        if (cellValue) {\n          cellElement.textContent = cellValue;\n          cellElement.classList.add(`field-cell--${cellValue}`);\n        }\n        rowElement.appendChild(cellElement);\n      }\n      gameTable.appendChild(rowElement);\n    }\n  }\n\n  function handleKeyPress() {\n    if (!gameActive) {\n      return;\n    }\n\n    let moved = false;\n\n    switch (event.key) {\n      case 'ArrowLeft':\n        moved = moveLeft();\n        break;\n      case 'ArrowRight':\n        moved = moveRight();\n        break;\n      case 'ArrowUp':\n        moved = moveUp();\n        break;\n      case 'ArrowDown':\n        moved = moveDown();\n        break;\n    }\n\n    if (moved) {\n      createRandomCell();\n      renderGameBoard();\n\n      if (isGameOver()) {\n        gameActive = false;\n        messageLose.classList.remove('hidden');\n      }\n    }\n  }\n\n  function moveLeft() {\n    let moved = false;\n\n    for (let row = 0; row < numRows; row++) {\n      for (let col = 1; col < numCols; col++) {\n        if (gameBoard[row][col]) {\n          let currentCol = col;\n\n          while (currentCol > 0) {\n            if (!gameBoard[row][currentCol - 1]) {\n              gameBoard[row][currentCol - 1] = gameBoard[row][currentCol];\n              gameBoard[row][currentCol] = null;\n              currentCol--;\n              moved = true;\n            } else if (gameBoard[row][currentCol - 1]\n              === gameBoard[row][currentCol]) {\n              gameBoard[row][currentCol - 1] *= 2;\n              score += gameBoard[row][currentCol - 1];\n              gameBoard[row][currentCol] = null;\n              moved = true;\n              break;\n            } else {\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    if (moved) {\n      scoreElement.innerText = score;\n\n      if (isGameWon()) {\n        gameActive = false;\n        messageWin.classList.remove('hidden');\n      }\n    }\n\n    return moved;\n  }\n\n  function moveRight() {\n    let moved = false;\n\n    for (let row = 0; row < numRows; row++) {\n      for (let col = numCols - 2; col >= 0; col--) {\n        if (gameBoard[row][col]) {\n          let currentCol = col;\n\n          while (currentCol < numCols - 1) {\n            if (!gameBoard[row][currentCol + 1]) {\n              gameBoard[row][currentCol + 1] = gameBoard[row][currentCol];\n              gameBoard[row][currentCol] = null;\n              currentCol++;\n              moved = true;\n            } else if (gameBoard[row][currentCol + 1]\n              === gameBoard[row][currentCol]) {\n              gameBoard[row][currentCol + 1] *= 2;\n              score += gameBoard[row][currentCol + 1];\n              gameBoard[row][currentCol] = null;\n              moved = true;\n              break;\n            } else {\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    if (moved) {\n      scoreElement.innerText = score;\n    }\n\n    return moved;\n  }\n\n  function moveUp() {\n    let moved = false;\n\n    for (let col = 0; col < numCols; col++) {\n      for (let row = 1; row < numRows; row++) {\n        if (gameBoard[row][col]) {\n          let currentRow = row;\n\n          while (currentRow > 0) {\n            if (!gameBoard[currentRow - 1][col]) {\n              gameBoard[currentRow - 1][col] = gameBoard[currentRow][col];\n              gameBoard[currentRow][col] = null;\n              currentRow--;\n              moved = true;\n            } else if (gameBoard[currentRow - 1][col]\n              === gameBoard[currentRow][col]) {\n              gameBoard[currentRow - 1][col] *= 2;\n              score += gameBoard[currentRow - 1][col];\n              gameBoard[currentRow][col] = null;\n              moved = true;\n              break;\n            } else {\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    if (moved) {\n      scoreElement.innerText = score;\n    }\n\n    return moved;\n  }\n\n  function moveDown() {\n    let moved = false;\n\n    for (let col = 0; col < numCols; col++) {\n      for (let row = numRows - 2; row >= 0; row--) {\n        if (gameBoard[row][col]) {\n          let currentRow = row;\n\n          while (currentRow < numRows - 1) {\n            if (!gameBoard[currentRow + 1][col]) {\n              gameBoard[currentRow + 1][col] = gameBoard[currentRow][col];\n              gameBoard[currentRow][col] = null;\n              currentRow++;\n              moved = true;\n            } else if (gameBoard[currentRow + 1][col]\n              === gameBoard[currentRow][col]) {\n              gameBoard[currentRow + 1][col] *= 2;\n              score += gameBoard[currentRow + 1][col];\n              gameBoard[currentRow][col] = null;\n              moved = true;\n              break;\n            } else {\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    if (moved) {\n      scoreElement.innerText = score;\n    }\n\n    return moved;\n  }\n\n  initializeGame();\n});\n"],"names":["document","addEventListener","gameTable","querySelector","scoreElement","startButton","messageStart","messageLose","messageWin","gameBoard","score","gameActive","initializeGame","fill","map","innerText","classList","remove","add","renderGameBoard","isGameOver","row","col","numCols","numRows","createRandomCell","emptyCells","push","length","_emptyCells_Math_floor","Math","floor","random","row1","col1","innerHTML","rowElement","createElement","cellValue","cellElement","textContent","concat","appendChild","moved","event","key","moveLeft","currentCol","isGameWon","moveRight","moveUp","currentRow","moveDown"],"version":3,"file":"index.a9d11942.js.map"}